#include <stdint.h>
#include <common.h>
#include <cfg_api_new.h>
#include <event.h>
#include <lynx_dev.h>
#include <wla_api.h>
#include "at_cmd.h"
#include "user_config.h"
#include "at_cmd_func.h"
#include <net_api.h>
#include "at.h"



#define WSCAN_TIMEOUT 1000
uint8_t elink_flag = false;
uint8_t scan_flag = false;
uint8_t ssid_scan_name[32];

uint32_t wscan_time = 0;
extern uint8_t specialAtState;
extern at_funcationType at_fun[];





/*!-----------------------------------------------------------------------------
 * function: at_wifi_txpwr
 *
 *  \brief:    Set or query tx power level
 *  \operator: "="set, "=?"query the current setting
 *  \param 0:  tx power level [0-12]
 *  \return:   check result
 +----------------------------------------------------------------------------*/

#if 0
int at_wifi_txpwr(int argc, char *argv[], char *op[])		//wtxpwr
{
	if (!strcmp(op,"=")) {
		if (argc != 1)
			return at_ERR_HELP;
		if (strchr(argv[0], ' '))
			return at_ERR_PARM;
		if (wlan_set_txpwr(atoi(argv[0])) < 0)
			return at_ERR_PARM;
		g_rfParam.txpower = atoi(argv[0]);
		save_at_param();
	} else if (!strcmp(op,"=?")) {
		if (argc != 0)
			return at_ERR_HELP;
		serial_printf("\n<%d>\n", g_rfParam.txpower);
	} else {
		return at_ERR_OP;
	}
	return at_ERR_OK;
}
#endif



#if 0
/*!-----------------------------------------------------------------------------
 * function: at_wifi_wps
 *
 *  \brief:    start or stop wps
 *  \operator: "="set, "
 *  \param 0:  enable or disable
 *  \return:   check result
 +----------------------------------------------------------------------------*/
//extern int wlan_start_wps(int timeout);
//extern int wlan_stop_wps(void);
int at_wifi_wps(int argc, char *argv[], char *op[])		//wreconn
{
	if (!strcmp(op,"="))
	{
		if (argc != 1)
		{
			return at_ERR_HELP;
		}
		if(atoi(argv[0]) == 1)
		{
			//wlan_start_wps(3000);
			serial_printf("\n <%s> start\n",__FUNCTION__);
		}
		else if(atoi(argv[0]) == 0)
		{
			//wlan_stop_wps();
			serial_printf("\n <%s> stop\n",__FUNCTION__);
		}
		else
		{
			return at_ERR_PARM;
		}
	}
	else
	{
		return at_ERR_OP;
	}
	return at_ERR_OK;
}

/*!-----------------------------------------------------------------------------
 * function: at_wifi_mdns
 *
 *  \brief:    start or stop the mdns
 *  \operator: "="set, "
 *  \param 0:  enable or disable
 *  \param 1:  hostname
 *  \param 2:  server_name
 *  \param 3:  port
 *  \return:   check result
 +----------------------------------------------------------------------------*/
int at_wifi_mdns(int argc, char *argv[], char *op[])
{
	if (!strcmp(op,"="))
	{
		serial_printf("\n <%s> :<%d><%s><%s><%d>\n",
						__FUNCTION__,atoi(argv[0]),argv[1],argv[2],atoi(argv[3]));
	}
	else
	{
		return at_ERR_OP;
	}
	return at_ERR_OK;
}
#endif

/*!-----------------------------------------------------------------------------
 * function: at_wifi_sleep
 *
 *  \brief:    Set sleep mode
 *  \operator: "="set,
 *  \param 0:  0:disable; 1:light sleep; 2:deep sleep
 *  \return:   check result
 +----------------------------------------------------------------------------*/
#if 0
int at_wifi_sleep(int argc, char *argv[], char *op[])		//wsleep
{
	if (!strcmp(op,"=")) {
		link_sts linkStatus;
		int val;

		if (argc != 1)
			return at_ERR_HELP;

		wlan_get_link_sts(&linkStatus, SOFT_AP);
		if (linkStatus.is_connected) {
			serial_printf("power-saving do not active if AP exist\n");
			return at_ERR_HELP;
		}
		val = atoi(argv[0]);
		if ((atoi(argv[0]) < 0) || (atoi(argv[0]) > 2))
			return at_ERR_PARM;
		if (val == 2) {
			if (wlan_power_off() < 0) {
				serial_printf("err! light sleep is active\n");
				return at_ERR_PARM;
			}
			serial_printf("caution! disable deep sleep before Wi-Fi operations\n");
		} else if (val == 1) {
			if (wlan_enable_powersave() < 0) {
				serial_printf("err! deep sleep is active\n");
				return at_ERR_PARM;
			}
		} else if (val == 0) {
			wlan_power_on();
			wlan_disable_powersave();
		}
	} else {
		return at_ERR_OP;
	}
	return at_ERR_OK;
}
#endif


void at_setupCmdWmode(unsigned char id,char *pPara){
  int8_t temp[16];
  uint16_t len;
  if(elink_flag == true){
    at_backErrHead;
    uart0_sendStr("-5");
    at_backTail;
    return;
  }
  len = at_dataStrCpy(temp, pPara, sizeof(temp));
  if(len <= 0){
    at_backErrHead;
    uart0_sendStr("-4");
    at_backTail;
    return;     
  }
  if(3==len && !memcmp(pPara,"STA",3)){
    if(g_rfParam.work_mode != OPMODE_STA){
    	g_rfParam.work_mode = OPMODE_STA;  	
    }else{
    	goto WMODE_OUT;
    }
  }else if(5==len && !memcmp(pPara,"APSTA",5)){
    if(g_rfParam.work_mode != OPMODE_APSTA){
    	g_rfParam.work_mode = OPMODE_APSTA;  	
    }else{
    	goto WMODE_OUT;
    }
  }else if(2==len && !memcmp(pPara,"AP",2)){
  	if(g_rfParam.work_mode != OPMODE_AP){
  		g_rfParam.work_mode = OPMODE_AP;		
  	}else{
    	goto WMODE_OUT;
    }  
    //web_mode_set = 0xff;
  }else{
    at_backErrHead;
    uart0_sendStr("-4");
    at_backTail;
    return;
  }
  apsta_restart();
  rf_config_submit();
WMODE_OUT:
  at_backOk;
  return;
}


void at_exeCmdWmode(unsigned char id)
{
  at_backOkHead;
  if(OPMODE_APSTA == g_rfParam.work_mode){
    uart0_sendStr("APSTA");
  }else if(OPMODE_STA == g_rfParam.work_mode){
    uart0_sendStr("STA");
  }else{
    uart0_sendStr("AP");
  }
  at_backTail;
  return;
}


void at_exeCmdCwjap(unsigned char id)
{
	at_backOkHead;
	uart0_sendStr(g_rfParam.sta_param.ssid);
	uart0_sendStr(",");
	uart0_sendStr(g_rfParam.sta_param.key);
	at_backTail;
	return;
}


void at_setupCmdCwjap(unsigned char id,char *pPara)
{
	int8_t len;
	char *ssid, *pwd;
	//用于接收数据，防止数据冲出长度
	uint8_t temp[65];
	if (elink_flag == true || OPMODE_AP == g_rfParam.work_mode){
		at_backErrHead;
		uart0_sendStr("-5");
		at_backTail;
		return;
	}
	len = at_dataStrCpy(temp, pPara, sizeof(temp));
	if(len <= 0 || len >32){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;
	}
	memset(g_rfParam.sta_param.ssid,0,32);
	strcpy(g_rfParam.sta_param.ssid, temp);
	pPara +=len+1;
	len = qlz_dataStrCpy(temp,pPara,sizeof(temp));
	if(len <= 0 || len >64){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;
	}
	memset(g_rfParam.sta_param.key,0,64);
	strcpy(g_rfParam.sta_param.key, temp);
	rf_param rfparam;
	if(rf_config_get(&rfparam)){
		if(!strcmp(g_rfParam.sta_param.ssid,rfparam.sta_param.ssid) &&
			!strcmp(g_rfParam.sta_param.key,rfparam.sta_param.key)){
			goto WJAP_OUT;
		}
	}
	g_rfParam.sta_param.channel = 0;
	g_rfParam.sta_param.enc = SECURITY_AUTO;
	memset(g_rfParam.sta_param.bssid,0,6);
	apsta_restart();
	rf_config_submit();
WJAP_OUT:
	at_backOk;
	return;

}



void at_exeCmdCwslk(unsigned char id)
{
	link_sts linkStatus;
	if(OPMODE_AP == g_rfParam.work_mode)
	{
		at_backOkHead;
		uart0_sendStr("Disconnected");
		at_backTail;
		return;
	}
	if (wlan_get_link_sts(&linkStatus, STATION) < 0){
		at_backOkHead;
		uart0_sendStr("-5");
		at_backTail;
		return;
	}
	at_backOkHead;
	uart0_sendStr(linkStatus.is_connected?"Connected":"Disconnected");
	at_backTail;
	return;
}


void at_setupCmdCwscan(uint8_t id, char *pPara)
{
	int8_t len;
	uint32_t t;
	if(scan_flag == true)
	{
		at_backErrHead;
		uart0_sendStr("-5");
		at_backTail;
		return;
	}

	memset(ssid_scan_name,0,sizeof(ssid_scan_name));
	len = qlz_dataStrCpy(ssid_scan_name,pPara,sizeof(ssid_scan_name));
	if(len <=0){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;		
	}
	scan_flag = true;
	specialAtState = false;
	t = sys_now() - wscan_time;
	if(wscan_time && t < WSCAN_TIMEOUT){
		sys_msleep(t);
	}
	wlan_start_scan();
}

void at_exeCmdCwscan(uint8_t id)
{
	uint32_t t;
	if(scan_flag == true)
	{
		at_backErrHead;
		uart0_sendStr("-5");
		at_backTail;
		return;
	}
	scan_flag = true;
	specialAtState = false;
	memset(ssid_scan_name,0,sizeof(ssid_scan_name));
	t = sys_now() - wscan_time;
	if(wscan_time && t < WSCAN_TIMEOUT){
		sys_msleep(t);
	}
	wlan_start_scan();
	return;
}


int8_t get_router_rssi(int8_t bss_rssi){
  int16_t rssi;
  rssi= (bss_rssi+120)*100/80;
  if(rssi<1){
    rssi = 1;
  }else if(rssi > 100){
    rssi = 100;
  }
  return rssi;
}


void at_exeCmdCwann(uint8_t id)
{
	uint8_t s = 0;
	ip_sts outNetpara;
	at_backOkHead;
	if(!memcmp(at_fun[id].at_cmdName,"WANN",strlen("WANN"))){
		s = 1;
	}
	if(s){	
		net_if_ip_sts(&outNetpara, STATION);
		uart0_sendStr((g_atParam.dhcp_mode & 0x2)?"DHCP":"static");
		uart0_sendStr(",");		
	}else{
		net_if_ip_sts(&outNetpara, SOFT_AP);
	}

	uart0_sendStr(outNetpara.ip);
	uart0_sendStr(",");
	uart0_sendStr(outNetpara.mask);
	if(s){
		uart0_sendStr(",");
		uart0_sendStr(outNetpara.gate);
	}
	at_backTail;
	return;
}





void at_setupCmdCwann(uint8_t id, char *pPara)
{	

	int8_t len;
	char temp[16];
	len = at_dataStrCpy(temp, pPara, sizeof(temp));
	if(len <= 0){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;		
	}
	lowers_to_uppers(temp,len);
	if(!strcmp(temp,"DHCP")){
		g_atParam.dhcp_mode |= 0x2;
		goto WANN_OK;
	}
	if(!strcmp(temp,"STATIC")){
		g_atParam.dhcp_mode &= ~0x2;
	}else{
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;			
	}
	pPara += len + 1;
	len = at_dataStrCpy(temp, pPara, sizeof(temp));
	if(len <=0){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;				
	}
	if(ipaddr_addr(temp) == 0xffffffff){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;
	}
	strcpy(g_atParam.staip_param.ip, temp);
	

	pPara += len + 1;
	len = at_dataStrCpy(temp, pPara, sizeof(temp));
	if(len <=0){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;				
	}

	if(ipaddr_addr(temp) == 0xffffffff){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;
	}

	strcpy(g_atParam.staip_param.mask, temp);

	pPara += len + 1;
	len = qlz_dataStrCpy(temp, pPara, sizeof(temp));
	if(len <=0){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;				
	}

	if(ipaddr_addr(temp) == 0xffffffff){
		at_backErrHead;
		uart0_sendStr("-4");
		at_backTail;
		return;
	}
	strcpy(g_atParam.staip_param.gw, temp);
WANN_OK:
	apsta_restart();
	at_backOk;
	return;
}


void at_exeCmdMac(uint8_t id){
	uint8_t i;
	uint8_t bssid[6];
	char temp[64];
	if(!memcmp(at_fun[id].at_cmdName,"WSMAC",strlen("WSMAC"))){
		memcpy(bssid, wlan_get_myaddr(STATION), 6);
	}else{
		memcpy(bssid, wlan_get_myaddr(SOFT_AP), 6);
	}
	
	at_backOkHead;
	sprintf(temp,MACSTRS, MAC2STR(bssid));
/*
	for(i = 0; i < strlen(temp);i++)
	{
		if(islower(temp[i])){
			temp[i] = toupper(temp[i]);
		}

	}
*/
	uart0_sendStr(temp);
	at_backTail;
	return;
}



void at_exeCmdCwslq(uint8_t id){
	link_sts linkStatus;
	uint8_t rs[10];
	if((wlan_get_link_sts(&linkStatus, STATION) < 0) || !linkStatus.is_connected){
		at_backOkHead;
		uart0_sendStr("Disconnected");
		goto WSLQ_OUT;
	}

	at_backOkHead;
	uart0_sendStr("Normal, ");
	linkStatus.wifi_strength = get_router_rssi(linkStatus.wifi_strength);
			//rssi = get_router_rssi(rssi);
	sprintf(rs,"%d%%",linkStatus.wifi_strength);
	uart0_sendStr(rs);
WSLQ_OUT:
	at_backTail;
	return;
}





