#include <c_types.h>
#include <stdint.h>
#include <common.h>
#include <flash_api.h>
#include "lwip/sockets.h"
#include <cfg_api_new.h>
#include <event.h>
#include <os_api.h>
#include <net_api.h>
#include <wla_api.h>
#include <gpio.h>
#include <version.h>
#include <built_info.h>
#include <user_config.h>
#include "../../lib/atcmd/at.h"
#ifdef CONFIG_OMNICONFIG
#include <omniconfig.h>
#include <omniconfig_func.h>
char omni_ipaddr[64];
char omni_mac_str[16];
#endif
typedef struct{
	uint8_t led_sts:1;
	uint8_t s_linkup:2;
	uint8_t reset_wifi_flag:2;
	uint8_t sta_err_times:3;
	uint8_t try_time:5;
	uint8_t state:3;
}wifi_sys;

extern uint32_t wscan_time;
static wifi_sys wifiSys ={0,0,1,0,30,OMNI_STATE_NONE};
rf_param g_rfParam;

static network_info  wNetConfig;
static network_info_adv wNetConfigAdv;

extern uint8_t scan_flag;
extern at_stateType  at_state;
extern uint8_t specialAtState;
extern uint8_t ssid_scan_name[];

void apsta_restart(void){
	wifiSys.reset_wifi_flag = 1;
	wifiSys.sta_err_times = 0;
	return;
}

uint8_t get_slinkup(void){
	return wifiSys.s_linkup;
}

static void notify_connectfailed_handler(int err)
{
	serial_printf("Connect err=%d\n", err);
	if(wifiSys.sta_err_times<5){
		wifiSys.sta_err_times++;
	}
	return;
}


static void notify_wifi_status_handler(int status)
{
	switch (status) {
	case NOTIFY_STA_LINK_UP:
		wifiSys.s_linkup = 1;
		serial_printf("Station up\n");
#if defined(CONFIG_LWIP)
		net_if_up(NETIF_STA, wNetConfigAdv.dhcp_mode, wlan_get_myaddr(STATION),
				wNetConfigAdv.local_ip_addr, wNetConfigAdv.net_mask,
				wNetConfigAdv.gateway_ip_addr, wNetConfigAdv.dnssvr_ip_addr);
#endif
		if(!g_rfParam.sta_param.channel){
			apsta_restart();
		}
		break;
	case NOTIFY_STA_LINK_DOWN:
		wifiSys.s_linkup = 0;
		wifiSys.sta_err_times = 0;
		g_rfParam.sta_param.channel = 1;
		serial_printf("Station down\n");
#if defined(CONFIG_LWIP)
		net_if_down(NETIF_STA);
#endif
		break;
	case NOTIFY_AP_LINK_UP:
		serial_printf("AP up\n");
#if defined(CONFIG_LWIP)
		net_if_up(NETIF_AP, wNetConfig.dhcp_mode, wlan_get_myaddr(SOFT_AP),
				wNetConfig.local_ip_addr, wNetConfig.net_mask,
				wNetConfig.gateway_ip_addr, wNetConfig.dnssvr_ip_addr);
#endif

		break;
	case NOTIFY_AP_LINK_DOWN:
		serial_printf("AP down\n");
#if defined(CONFIG_LWIP)
		net_if_down(NETIF_AP);
#endif
		break;
	}
}


static void notify_wifi_scanHandler(scan_result *pApList)
{
	struct _aplist_adv *ap_adv;
	int i = 0;
	char buf[64];
	if(scan_flag == false){
		return;
	}
	wscan_time = sys_now();
	at_backOkHead;
	uart0_sendStr("Ch,SSID,BSSID,Security,Indicator\r\n");
	if(pApList == NULL)
	{
		goto ScanErr;
	}
	ap_adv = (struct _aplist_adv *)pApList->aplist;
	for (i = 0; i < pApList->ap_num; i++)
	{
		if(strlen(ssid_scan_name) && strcmp(ssid_scan_name,ap_adv->ssid)){
			ap_adv++;
			continue;
		}
		sprintf(buf,"%d,%s,"MACSTR",",ap_adv->channel,ap_adv->ssid,MAC2STR(ap_adv->bssid));
		uart0_sendStr(buf);
		switch(ap_adv->security){
		case SECURITY_NONE:
		uart0_sendStr("OPEN");
		break;
		case SECURITY_WEP:
		uart0_sendStr("WEP");
		break;
		case SECURITY_WPA_TKIP:
		case SECURITY_WPA_AES:
		uart0_sendStr("WPA_PSK");
		break;
		case SECURITY_WPA2_TKIP:
		case SECURITY_WPA2_AES:
		uart0_sendStr("WPA2_PSK");
		default:
		uart0_sendStr("WPA_WPA2_PSK");
		break;
		}
		sprintf(buf,",%d\r\n",get_router_rssi(ap_adv->power));
		uart0_sendStr(buf);
		ap_adv++;
	}
ScanErr:
	scan_flag = false;
	specialAtState = true;
	at_state = at_statIdle;
}

static void notify_DNS_handler(char *str, int len)
{
	serial_printf("[%s]\n", str);
}

static void notify_dhcp_handler(ip_sts *pnet)
{
	extern uint8_t elink_flag;
#if 1
	serial_printf("dhcp=%d ip=%s gate=%s mask=%s dns=%s mac=%s bcast=%s\n",
				pnet->dhcp, pnet->ip,
				pnet->gate, pnet->mask,
				pnet->dns, pnet->mac,
				pnet->broadcastip);
#endif
	wifiSys.s_linkup = 2;
	if(true == elink_flag){
		wifiSys.state = OMNI_STATE_CONNECTING;
		wifiSys.try_time = 30;
		elink_flag = false;		
	}
	return;
}





static void notify_wifi_para_handler(apinfo_adv *ap_info, char *key, int key_len)
{
#if 1	
	serial_printf("SSID=%s BSSID=%s CH=%d SEC=%d KEY=%s KEY_Len=%d\n",
				ap_info->ssid, ether_ntoa(ap_info->bssid),
				ap_info->channel, ap_info->security,
				key, key_len);
#endif
	if(!memcmp(ap_info->bssid,wlan_get_myaddr(SOFT_AP),6)
		||(!ap_info->security && key_len)){
		return;
	}
	if(strcmp(ap_info->ssid,g_rfParam.sta_param.ssid)||strcmp(key,g_rfParam.sta_param.key)){
		apsta_restart();
		return;
	}
	if(!ap_info->channel){
		g_rfParam.sta_param.channel = 0;
		return;
	}
	memcpy(g_rfParam.sta_param.bssid,ap_info->bssid,6);
	g_rfParam.sta_param.enc = ap_info->security;
	g_rfParam.sta_param.channel = ap_info->channel;
	rf_config_submit();
	return;
	
}


static void sta_start(char *ssid,char *pwd,unsigned char *bssid)
{
#if 1
	serial_printf("STA:SSID=%s,PASS=%s\n", ssid, pwd);
#endif
	/* Initialize station parameteres */
	memset(&wNetConfigAdv, 0x0, sizeof(wNetConfigAdv));
	strcpy(wNetConfigAdv.ap_info.ssid, ssid);		/* wlan ssid string */
	/*
		WEP key length:			ASCII=5(64 bits) or 13(128 bits)
								HEX=10(64 bits) or 26(128 bits)
		WPA/WPA2 key length:	ASCII=8-63, HEX=64
	 */
	strcpy(wNetConfigAdv.key, pwd);		/* wlan key string or hex data */
	wNetConfigAdv.key_len = strlen(pwd);
	//wNetConfig.wifi_mode = STATION;			/* wlan mode */
	wNetConfigAdv.dhcp_mode = DHCP_DISABLE;	/* Fetch Ip address from DHCP server */
#if 0
	wNetConfigAdv.ap_info.security = SECURITY_AUTO;	/* Wlan security mode */
	wNetConfigAdv.ap_info.channel = 0;						/* Select chanel automatically */	
#else
	wNetConfigAdv.ap_info.security = g_rfParam.sta_param.enc;	/* Wlan security mode */
	wNetConfigAdv.ap_info.channel = g_rfParam.sta_param.channel;/* Select chanel automatically */	

#endif
	if (g_atParam.dhcp_mode & 0x2){
		wNetConfigAdv.dhcp_mode = DHCP_CLIENT;
	}
	strcpy((char *)wNetConfigAdv.local_ip_addr, g_atParam.staip_param.ip);
	strcpy((char *)wNetConfigAdv.net_mask, g_atParam.staip_param.mask);
	strcpy((char *)wNetConfigAdv.gateway_ip_addr, g_atParam.staip_param.gw);
	strcpy((char *)wNetConfigAdv.dnssvr_ip_addr, "114.114.114.114");
	if(bssid != NULL || CHECKMAC(bssid)){
		memcpy(wNetConfigAdv.ap_info.bssid, bssid,6); /* wlan bssid*/
	}
	wNetConfigAdv.wifi_retry_interval = (wifiSys.sta_err_times<5)?100:10000;					/* Retry interval after a failure connection */
	wlan_set_reconnect(g_rfParam.reconn);
	wlan_set_myaddr(STATION, g_atParam.mac.sta_mac);
	/* Connect Now! */
	wlan_start_adv(&wNetConfigAdv);
	return;
}


static void ap_start(char *ssid, char *pwd, int ch)
{

	/* Initialize AP parameteres */
	/* Setup channel number */
	//auto selcet channel
	ch = auto_select_channel(ch);
	wlan_set_channel(ch);
#if 1
	serial_printf("AP:SSID=%s,PASS=%s,CH=%d\n", ssid, pwd, ch);
#endif
	memset(&wNetConfig, 0x0, sizeof(wNetConfig));
	strcpy(wNetConfig.wifi_ssid, ssid);
	//memcpy(wNetConfig.wifi_ssid, "12345678901234567890123456789012", sizeof(wNetConfig.wifi_ssid));
	/*
		WEP key length: 		ASCII=5(64 bits) or 13(128 bits)
								HEX=10(64 bits) or 26(128 bits)
		WPA/WPA2 key length:	ASCII=8-63, HEX=64
	 */
	
	strcpy((char *)wNetConfig.wifi_key, pwd);
	wNetConfig.wifi_mode = SOFT_AP;
	//wNetConfig.wifi_mode = g_rfParam.work_mode;
	wNetConfig.dhcp_mode = DHCP_DISABLE;
	if (g_atParam.dhcp_mode & 0x1){
		wNetConfig.dhcp_mode = DHCP_SERVER;
	}
	strcpy((char *)wNetConfig.local_ip_addr, g_atParam.apip_param.ip);
	strcpy((char *)wNetConfig.net_mask, g_atParam.apip_param.mask);
	strcpy((char *)wNetConfig.gateway_ip_addr, g_atParam.apip_param.gw);
	strcpy((char *)wNetConfig.dnssvr_ip_addr, g_atParam.apip_param.gw);
	wlan_set_hidden_ssid(0);
	if (g_rfParam.ap_param.hidden_ssid){
		wlan_set_hidden_ssid(1);
	}
	wNetConfig.wifi_retry_interval = 100;
	wlan_set_myaddr(SOFT_AP, g_atParam.mac.ap_mac);
	wlan_start(&wNetConfig);
	return;
}


/*----------------------------------------------------------------*/
/**
 * The function handle status and flashes Wi-Fi LED.
 *
 * @param None.
 * @return int Millisecond to sleep.
 */
/*----------------------------------------------------------------*/
static int user_led_handler(void)
{
	int timeout, mode, gpio_mode,sm;
//	sdk_param param;

	timeout = 1000;
	
	//config_get(&param);

	mode = g_rfParam.work_mode;
	if ((mode == OPMODE_STA) ||
		(mode == OPMODE_APSTA)) {
		switch (wlan_get_ifs_sm(STATION)) {
		case STATE_IDLE:
		case STATE_SCAN:
		case STATE_SCAN_DONE:
			pin_mode(WIFI_LED_PIN, 1);
			gpio_mode = 1;
			timeout = 250;
			break;
		case STATE_LINK_UP:
			gpio_enable(WIFI_LED_PIN, 0);
			gpio_mode = 0;
			break;
		}
		wifiSys.led_sts = !wifiSys.led_sts;
	} 
	else if ((sm = wlan_get_ifs_sm(SOFT_AP)) &&
				wlan_get_sta_num(SOFT_AP))
	{
		pin_mode(WIFI_LED_PIN, 1);
		wifiSys.led_sts = !wifiSys.led_sts;
	}
	else
	{
		pin_mode(WIFI_LED_PIN, 1);
		wifiSys.led_sts = 0;
	}
	if (gpio_mode){
		digital_write(WIFI_LED_PIN, wifiSys.led_sts);
	}
	return timeout;
}

#ifdef CONFIG_OMNICONFIG
void omni_state_connecting(void)
{
	if (wifiSys.state != OMNI_STATE_CONNECTING)
	{
		return;
	}
	if(--wifiSys.try_time == 0){
		wifiSys.state = OMNI_STATE_CONNECT_SUCCESS;
		return;
	}
#if 0
		/*TODO: Ping Test*/
	serial_printf("\n%s--%d-------------------------------------ip=%s,mac=%s\n ",
		__FUNCTION__,__LINE__,omni_ipaddr,omni_mac_str);
#endif
	omnicfg_broadcast(OMNI_STATE_CONNECT_SUCCESS,omni_ipaddr,omni_mac_str,1);
	return;
}
#endif

void apsta_init(void){

  if (g_rfParam.work_mode != OPMODE_STA)
  {
    ap_start(g_rfParam.ap_param.ssid,g_rfParam.ap_param.key,g_rfParam.ap_param.channel);
  }
  if (g_rfParam.work_mode != OPMODE_AP)
  {
    sta_start(g_rfParam.sta_param.ssid,g_rfParam.sta_param.key,g_rfParam.sta_param.bssid);    
  }
  return;  
}


void wifi_reset_proc(void){
	if(!wifiSys.reset_wifi_flag){
		return;
	}
	if(1 == wifiSys.reset_wifi_flag){
		wlan_suspend();
	}
	apsta_init();

	wifiSys.reset_wifi_flag = 0;
	return;
}

void mylinks_wifi_start(void){
	wifiSys.reset_wifi_flag = g_rfParam.auto_conn?2:0;
	return;
}

void mylinks_init_notification(void)
{
	wlan_add_notification(NOTIFY_WIFI_SCAN_COMPLETED, notify_wifi_scanHandler);
	wlan_add_notification(NOTIFY_WIFI_STATUS_CHANGED, notify_wifi_status_handler);
	wlan_add_notification(NOTIFY_WIFI_PARA_CHANGED, notify_wifi_para_handler);
	wlan_add_notification(NOTIFY_WIFI_CONNECT_FAILED, notify_connectfailed_handler);
	wlan_add_notification(NOTIFY_WIFI_LED_TIMEOUT, user_led_handler);	
#ifdef CONFIG_LWIP
	net_add_notification(NOTIFY_DHCP_COMPLETED, notify_dhcp_handler);
	net_add_notification(NOTIFY_DNS_RESOLVE_COMPLETED, notify_DNS_handler);
#endif	
	return;
}




